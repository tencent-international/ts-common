{"version":3,"sources":["../src/dictionary.ts","../src/request.ts","../src/event.ts"],"names":[],"mappings":"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","file":"index.mjs","sourcesContent":["interface LocalizedDictionaryItem<T extends string | number = string> {\n    value: T;\n    localizedInfo?: Partial<Record<BasicTypes.Locale, { label: string; tip?: string }>>;\n  }\n  \n  export type LabeledDictionaryItem<T extends string | number> = {\n    value: T;\n    label: string;\n    tip?: string;\n  };\n  \n\nexport class LocalizedDictionary<T extends string | number = string> {\n    private readonly items: LocalizedDictionaryItem<T>[];\n    private readonly map: Record<T, LocalizedDictionaryItem<T>>;\n    constructor(items: LocalizedDictionaryItem<T>[]) {\n      this.items = items;\n      this.map = items.reduce((acc, item) => {\n        acc[item.value as T] = item;\n        return acc;\n      }, {} as Record<T, LocalizedDictionaryItem<T>>);\n    }\n  \n    getItem(key: T, locale: BasicTypes.Locale): LabeledDictionaryItem<T> {\n      const item = this.map[key];\n      if (!item) {\n        return { value: key, label: key.toString() };\n      }\n      const d = item.localizedInfo?.[locale] || item.localizedInfo?.['']; //default locale\n      return { value: key, label: d?.label ?? key.toString(), tip: d?.tip };\n    }\n  \n    getItems(locale: BasicTypes.Locale): LabeledDictionaryItem<T>[] {\n      return this.items.map(({ value }) => this.getItem(value, locale));\n    }\n  \n    getMap(locale: BasicTypes.Locale): Record<T, LabeledDictionaryItem<T>> {\n      return this.items.reduce((acc, item) => {\n        acc[item.value] = this.getItem(item.value, locale);\n        return acc;\n      }, {} as Record<T, LabeledDictionaryItem<T>>);\n    }\n  }\n  ","export interface RequestProps {\n  ignoreAuth?: boolean;\n  method: 'DELETE' | 'GET' | 'POST' | 'PUT' | 'PATCH' | 'OPTIONS' | 'HEAD';\n  url: string;\n  data?: any;\n  header?: object;\n}\n\nexport interface IRequest<T extends any = any> {\n  (props: RequestProps): Promise<T>;\n}\n\nlet provider: IRequest | undefined;\n\nexport function setRequestProvider(p: IRequest): void {\n  provider = p;\n}\n\nexport async function request<T extends any = any>(props: RequestProps): Promise<T> {\n  if (!provider) {\n    throw new Error('Request provider is not initialized. Please ensure that the provider is properly configured before making requests.');\n  }\n  return provider(props);\n}\n\nexport class RequestError extends Error {\n  public readonly code: number;\n  public readonly errorType: string;\n  constructor(message: string, code = 0, errorType = 'unknown') {\n    super(message);\n    this.name = 'RequestError';\n    this.code = code;\n    this.errorType = errorType;\n    Object.setPrototypeOf(this, RequestError.prototype);\n  }\n}\n","\n\nclass EventBus {\n\n    private subscribers: Map<string, Set<(event: any) => Promise<void>>> = new Map();\n    private onFirstSubscribeHandlers: Set<(topic: string) => void> = new Set();\n    private onLastSubscribeHandlers: Set<(topic: string) => void> = new Set();\n\n    public subscribe(topic: string, subscriber: (event: any) => Promise<void>): () => void {\n        const set = this.subscribers.get(topic) ?? new Set();\n        const wasEmpty = set.size === 0;\n        set.add(subscriber);\n        this.subscribers.set(topic, set);\n        if (wasEmpty) {\n            this.onFirstSubscribeHandlers.forEach(fn => fn(topic));\n            this.subscribers.set(topic, set);\n        }\n        return () => this.unsubscribe(topic, subscriber);\n    }\n\n    public unsubscribe(topic: string, subscriber: (event: any) => Promise<void>): void {\n        this.subscribers.get(topic)?.delete(subscriber);\n        if (!this.subscribers.get(topic)?.size) {\n            this.subscribers.delete(topic);\n            this.onLastSubscribeHandlers.forEach(fn => fn(topic));\n        }\n    }\n\n    public dispatch(topic: string, event: any): void {\n        this.subscribers.get(topic)?.forEach(subscriber => subscriber(event).catch(error => {\n            console.error(`EventBus emit error: ${error}`);\n        }));\n    }\n\n    public onFirstSubscribe(onFirstSubscribeHandler: (topic: string) => void): () => void {\n        this.onFirstSubscribeHandlers.add(onFirstSubscribeHandler);\n        return () => this.onFirstSubscribeHandlers.delete(onFirstSubscribeHandler);\n    }\n\n    public onLastSubscribe(onLastSubscribeHandler: (topic: string) => void): () => void {\n        this.onLastSubscribeHandlers.add(onLastSubscribeHandler);\n        return () => this.onLastSubscribeHandlers.delete(onLastSubscribeHandler);\n    }\n\n    public countTopic(): Record<string, number> {\n        const result: Record<string, number> = {};\n        this.subscribers.forEach((subscribers, topic) => {\n            result[topic] = subscribers.size;\n        });\n        return result;\n    }\n\n    public topics(): string[] {\n        return Array.from(this.subscribers.keys());\n    }\n\n    public subscriberChannel<T>(topic: string): SubscriberChannel<T> {\n        return new SubscriberChannel<T>(this, topic);\n    }\n\n    public dispatcherChannel<T>(topic: string): DispatcherChannel<T> {\n        return new DispatcherChannel<T>(this, topic);\n    }\n\n}\n\nexport class RemoteEventBus extends EventBus {\n\n    private publishProvider?: (topic: string, event: any) => void;\n\n    constructor(publishProvider?: (topic: string, event: any) => void) {\n        super();\n        this.publishProvider = publishProvider;\n    }\n\n    public setPublishProvider(publishProvider: (topic: string, event: any) => void): void {\n        this.publishProvider = publishProvider;\n    }\n\n    public publish(topic: string, event: any): void {\n        if (this.publishProvider) {\n            this.publishProvider(topic, event);\n        } else {\n            throw new Error('RemoteEventBus is not initialized. Please ensure that the instance is properly configured before making requests.');\n        }\n    }\n\n    public publisherChannel<T>(topic: string): PublisherChannel<T> {\n        return new PublisherChannel<T>(this, topic);\n    }\n}\n\nexport class DispatcherChannel<T> {\n    public readonly topic: string;\n    private readonly bus: EventBus;\n    constructor(bus: EventBus, topic: string) {\n        this.topic = topic;\n        this.bus = bus;\n    }\n\n    public dispatch(event: T): void {\n        this.bus.dispatch(this.topic, event);\n    }\n}\n\nexport class SubscriberChannel<T> {\n    public readonly topic: string;\n    private readonly bus: EventBus;\n    constructor(bus: EventBus, topic: string) {\n        this.topic = topic;\n        this.bus = bus;\n    }\n\n    public subscribe(subscriber: (event: T) => Promise<void>): () => void {\n        return this.bus.subscribe(this.topic, subscriber);\n    }\n\n    public unsubscribe(subscriber: (event: T) => Promise<void>): void {\n        this.bus.unsubscribe(this.topic, subscriber);\n    }\n}\n\nexport class PublisherChannel<T> {\n    public readonly topic: string;\n    private readonly bus: RemoteEventBus;\n    constructor(bus: RemoteEventBus, topic: string) {\n        this.topic = topic;\n        this.bus = bus;\n    }\n    public publish(event: T): void {\n        this.bus.publish(this.topic, event);\n    }\n}\n\nexport const defaultRemoteEventBus = new RemoteEventBus()\n"]}